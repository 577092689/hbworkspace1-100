/*******************************************************************************
 * Copyright 2011, 2012 Chris Banes.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *******************************************************************************/
package com.handmark.pulltorefresh.samples;

import java.util.Arrays;
import java.util.LinkedList;
import java.util.List;

import android.app.Activity;
import android.content.Context;
import android.os.AsyncTask;
import android.os.Bundle;
import android.view.DragEvent;
import android.view.Gravity;
import android.view.Menu;
import android.view.MenuItem;
import android.view.MotionEvent;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ArrayAdapter;
import android.widget.BaseAdapter;
import android.widget.GridView;
import android.widget.ImageView;
import android.widget.TextView;
import android.widget.Toast;

import com.handmark.pulltorefresh.library.PullToRefreshBase;
import com.handmark.pulltorefresh.library.PullToRefreshBase.Mode;
import com.handmark.pulltorefresh.library.PullToRefreshBase.OnRefreshListener2;
import com.handmark.pulltorefresh.library.PullToRefreshGridView;

public final class PullToRefreshGridActivity extends Activity {

	static final int MENU_SET_MODE = 0;

	private LinkedList<String> mListItems;
	private PullToRefreshGridView mPullRefreshGridView;
	private GridView mGridView;
	private ArrayAdapter<String> mAdapter;

	/** Called when the activity is first created. */
	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_ptr_grid);

		mPullRefreshGridView = (PullToRefreshGridView) findViewById(R.id.pull_refresh_grid);
		mGridView = mPullRefreshGridView.getRefreshableView();
		
		mListItems = new LinkedList<String>();
		
		
		
		
		mPullRefreshGridView.setAdapter(new DragGridAdapter(mListItems, getApplicationContext()));


		mPullRefreshGridView.setOnTouchListener(new View.OnTouchListener() {

		        @Override
		        public boolean onTouch(View v, MotionEvent event) {

		            if (event.getAction() == MotionEvent.ACTION_DOWN) {
		                GridView parent = (GridView) v;

		                int x = (int) event.getX();
		                int y = (int) event.getY();

		                int position = parent.pointToPosition(x, y);
		                if (position > AdapterView.INVALID_POSITION) {

		                    int count = parent.getChildCount();
		                    for (int i = 0; i < count; i++) {
		                        View curr = parent.getChildAt(i);
		                        curr.setOnDragListener(new View.OnDragListener() {

		                            @Override
		                            public boolean onDrag(View v, DragEvent event) {

		                                boolean result = true;
		                                int action = event.getAction();
		                                switch (action) {
		                                case DragEvent.ACTION_DRAG_STARTED:
		                                    break;
		                                case DragEvent.ACTION_DRAG_LOCATION:
		                                    break;
		                                case DragEvent.ACTION_DRAG_ENTERED:
		                                    v.setBackgroundResource(R.drawable.shape_image_view_small_gallery_selected);
		                                    break;
		                                case DragEvent.ACTION_DRAG_EXITED:
		                                    v.setBackgroundResource(R.drawable.shape_image_view_small_gallery_unselected);
		                                    break;
		                                case DragEvent.ACTION_DROP:
		                                    if (event.getLocalState() == v) {
		                                        result = false;
		                                    } else {
		                                        View droped = (View) event.getLocalState();
		                                        GridItem dropItem = ((DragGridItemHolder) droped.getTag()).item;

		                                        GridView parent = (GridView) droped.getParent();
		                                        DragGridAdapter adapter = (DragGridAdapter) parent.getAdapter();
		                                        List<GridItem> items = adapter.getItems();

		                                        View target = v;
		                                        GridItem targetItem = ((DragGridItemHolder) target.getTag()).item;
		                                        int index = items.indexOf(targetItem);
		                                        items.remove(dropItem);
		                                        items.add(index, dropItem);
		                                        adapter.notifyDataSetChanged();
		                                    }
		                                    break;
		                                case DragEvent.ACTION_DRAG_ENDED:
		                                    v.setBackgroundResource(R.drawable.shape_image_view_small_gallery_unselected);
		                                    break;
		                                default:
		                                    result = false;
		                                    break;
		                                }
		                                return result;
		                            }

								
		                        });
		                    }

		                    int relativePosition = position - parent.getFirstVisiblePosition();


		                    View target = (View) parent.getChildAt(relativePosition);

		                    DragGridItemHolder holder = (DragGridItemHolder) target.getTag();
		                    GridItem currentItem = holder.item;
		                    String text = currentItem.getFile().getAbsolutePath();

		                    ClipData data = ClipData.newPlainText("DragData", text);
		                    target.startDrag(data, new View.DragShadowBuilder(target), target, 0);
		                }
		            }
		            return false;

		        }});

				
		
		
		
		

		// Set a listener to be invoked when the list should be refreshed.
		mPullRefreshGridView.setOnRefreshListener(new OnRefreshListener2<GridView>() {

			@Override
			public void onPullDownToRefresh(PullToRefreshBase<GridView> refreshView) {
				Toast.makeText(PullToRefreshGridActivity.this, "Pull Down!", Toast.LENGTH_SHORT).show();
				new GetDataTask().execute();
			}

			@Override
			public void onPullUpToRefresh(PullToRefreshBase<GridView> refreshView) {
				Toast.makeText(PullToRefreshGridActivity.this, "Pull Up!", Toast.LENGTH_SHORT).show();
				new GetDataTask().execute();
			}

		});


		TextView tv = new TextView(this);
		tv.setGravity(Gravity.CENTER);
		tv.setText("Empty View, Pull Down/Up to Add Items");
		mPullRefreshGridView.setEmptyView(tv);

		mAdapter = new ArrayAdapter<String>(this, android.R.layout.simple_list_item_1, mListItems);
		mGridView.setAdapter(mAdapter);
	}

	private class GetDataTask extends AsyncTask<Void, Void, String[]> {

		@Override
		protected String[] doInBackground(Void... params) {
			// Simulates a background job.
			try {
				Thread.sleep(2000);
			} catch (InterruptedException e) {
			}
			return mStrings;
		}

		@Override
		protected void onPostExecute(String[] result) {
			mListItems.addFirst("Added after refresh...");
			mListItems.addAll(Arrays.asList(result));
			mAdapter.notifyDataSetChanged();

			// Call onRefreshComplete when the list has been refreshed.
			mPullRefreshGridView.onRefreshComplete();

			super.onPostExecute(result);
		}
	}

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		menu.add(0, MENU_SET_MODE, 0,
				mPullRefreshGridView.getMode() == Mode.BOTH ? "Change to MODE_PULL_DOWN"
						: "Change to MODE_PULL_BOTH");
		return super.onCreateOptionsMenu(menu);
	}

	@Override
	public boolean onPrepareOptionsMenu(Menu menu) {
		MenuItem setModeItem = menu.findItem(MENU_SET_MODE);
		setModeItem.setTitle(mPullRefreshGridView.getMode() == Mode.BOTH ? "Change to MODE_PULL_FROM_START"
				: "Change to MODE_PULL_BOTH");

		return super.onPrepareOptionsMenu(menu);
	}

	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
		switch (item.getItemId()) {
			case MENU_SET_MODE:
				mPullRefreshGridView
						.setMode(mPullRefreshGridView.getMode() == Mode.BOTH ? Mode.PULL_FROM_START
								: Mode.BOTH);
				break;
		}

		return super.onOptionsItemSelected(item);
	}

	private String[] mStrings = { "Abbaye de Belloc", "Abbaye du Mont des Cats", "Abertam", "Abondance", "Ackawi",
			"Acorn", "Adelost", "Affidelice au Chablis", "Afuega'l Pitu", "Airag", "Airedale", "Aisy Cendre",
			"Allgauer Emmentaler" };







	public class DragGridAdapter extends BaseAdapter{
		private Context context;
		private List<String> items;

		public DragGridAdapter(List<String> items, Context context){
		    this.context = context;
		    this.items = items;
		}

		@Override
		public int getCount() {
		    return items.size();
		}

		@Override
		public Object getItem(int position) {
		    return items.get(position);
		}

		@Override
		public long getItemId(int position) {
		    return position;
		}

		@Override
		public View getView(int position, View convertView, ViewGroup parent) {
		    DragGridItemHolder holder;
		    if (convertView == null) {
		        holder = new DragGridItemHolder();

		        ImageView img = new ImageView(context);
		        holder.image = img;
		        convertView = img;
		        convertView.setTag(holder);
		    } else {
		        holder = (DragGridItemHolder) convertView.getTag();
		    }
		    holder.item = items.get(position);
		    holder.image.setImageBitmap(items.get(position).getBitmap());
		    return convertView;
		}

		public List<String> getItems() {
		    return items;
		}
}
